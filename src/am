#!/bin/bash
VERSION="1.7.0"
LOG="am-build.log"
echo "Automated Make v${VERSION}"

function print_help() {
  echo ""
  echo "AM is a build automation tool that uses Make, CMake and Ninja"
  echo "Copyright 2015-2020 ATVG-Studios, freely open-sourced under the OSPL20"
  echo ""
  echo "Usage: am [-c|-td|-l|-h|-m] -- (-j)"
  echo ""
  echo "(All arguments following -- are passed down to Make or Ninja)"
  echo "(-j is just an example, all args from Make or Ninja are supported)"
  echo ""
  echo "Available Args:"
  echo "  -c --clone                   Clone the given Git repository before building"
  echo " -td --clone-target-directory  Specify where to clone into; Move there and run the default AM behaviour"
  echo "     --no-git-modules          DISABLE the check if a .gitmodules file exists"
  echo "  -l --print-log               Prints the build log (am-build.log) after everything is done"
  echo "  -h --help                    Prints this help dialog"
  echo "  -m --make                    Passes -GMake to CMake instead of -GNinja"
  echo "     --update-self             Install the latest Stable AM version"
}

CARGS=""
USE_MAKE=no
USE_LOG=no
USE_CHECK_GIT=yes
USE_CLONE=no
ARG_CLONE_URI=void
ARG_CLONE_TARGET=""
for arg in "$@"; do
  if [ "$arg" = "--" ]; then
    shift
    break
  fi

  case $arg in
    -c|--clone)
    USE_CLONE=yes
    shift
    ARG_CLONE_URI="$1"
    ;;
    -td|--clone-target-directory)
    ARG_CLONE_TARGET="$1"
    ;;
    --no-git-modules)
    USE_CHECK_GIT=no
    ;;
    -l|--print-log)
    USE_LOG=yes
    ;;
    -h|--help)
    print_help
    exit 0
    ;;
    -m|--make)
    USE_MAKE=yes
    ;;
    --update-self)
    echo "Running self-updater"
    pushd /tmp
    echo "Download newest version"
    wget https://gitlab.atvg-studios.com/atjontv/automated-make/-/raw/stable/src/am
    echo "Install newest version"
    mv am "$(which $0)"
    chmod +x "$(which $0)"
    popd
    echo "Done"
    exit 0
    ;;
  esac

  shift
done

if [ "$USE_MAKE" = "yes" ]; then
  CARGS="$CARGS -GMake"
else
  CARGS="$CARGS -GNinja"
fi

ARGS="$@"
CMAKE_FILE="CMakeLists.txt"
MAKE_FILE="Makefile"
NINJA_FILE="build.ninja"

function check_error() {
  if [ "$?" != "0" ]; then
    echo "An error occured in this state, please check the $LOG"
    exit 1
  fi
}

function refresh_builddir() {
  echo "Checking for build/"
  if [ -d build ]; then
    echo "Checking for build backup"
    if [ -d build.old ]; then
      echo "Removing build backup"
      rm -rf build.old
    fi
    echo "Backing up old build/"
    mv build build.old
  fi
  echo "Creating new build/"
  mkdir build
}

function log_header() {
  echo "========= Automated Make v${VERSION} =========" > $LOG
}

function log_end() {
  echo "========= Automated Build - END =========" >> $LOG
}

function log_cat() {
  if [ "${USE_LOG}" = "yes" ] && [ -e "am-build.log" ]; then
    cat $LOG
  fi
}

function check_git_submodules() {
  echo "Checking for .gitmodules file"
  if [ -e ".gitmodules" ]; then
    echo ".gitmodules found, checking for git"

    if ! hash git 2>/dev/null; then
      echo "Git not found, please make sure its installed!"
      exit 1
    fi

    echo "Initializing modules"
    git submodule init >> $LOG
    check_error
    echo "Updating Git Modules"
    git submodule update >> $LOG
    check_error
    echo "Finished"
  fi
}

function run_clone() {
  if ! hash git 2>/dev/null; then
    echo "Git not found, please make sure its installed!"
    exit 1
  fi

  echo "Cloning $ARG_CLONE_URI into $ARG_CLONE_TARGET"
  git clone "$ARG_CLONE_URI" "$ARG_CLONE_TARGET"
  check_error
  echo "Finished"
}

function run_ninja() {
  if ! hash ninja 2>/dev/null; then
    echo "Ninja not found, please make sure its installed!"
    exit 1
  fi

  echo "Running Ninja"
  echo "========= Running Ninja =========" >> $LOG
  ninja $ARGS >> $LOG
  check_error
}

function run_make() {
  if ! hash make 2>/dev/null; then
    echo "Make not found, please make sure its installed!"
    exit 1
  fi

  echo "Running Make"
  echo "========= Running Make =========" >> $LOG
  make $ARGS >> $LOG
  check_error
}

function run_cmake() {
  if ! hash cmake 2>/dev/null; then
    echo "CMake not found, please make sure its installed!"
    exit 1
  fi

  echo "Running Cmake"
  echo "========= Running CMake =========" >> $LOG
  cmake $CARGS .. >> $LOG
  check_error
}

if [ "$USE_CLONE" = "yes" ]; then
  run_clone

  if [ "$ARG_CLONE_TARGET" = "" ]; then
    exit 0
  else
    echo "Moving to $ARG_CLONE_TARGET"
    pushd "$ARG_CLONE_TARGET"
  fi
fi

refresh_builddir

if [ "$USE_CHECK_GIT" = "yes" ]; then
  echo "Checking for Git (--check-git-submodules used)"
  check_git_submodules
fi

echo "Checking for Cmake"
if [ ! -e "${CMAKE_FILE}" ]; then
  echo "No Cmake file!"

  echo "Checking for Make"
  if [ ! -e "${MAKE_FILE}" ]; then
    echo "No Make file!"
    if [ ! -e "${NINJA_FILE}" ]; then
      echo "No Ninja file either!"
      echo "Nothing to do .. exiting"
      exit 1
    else
        log_header
	run_ninja
        log_end
    fi
  else
    log_header
    run_make
    log_end
  fi

  echo "Build complete!"
  log_cat
  exit 0
fi
echo "Cmake found"

echo "PushD to build/"
pushd build

log_header
run_cmake ".."

FOUND_BUILD=no
echo "Checking for Make"
if [ -e "${MAKE_FILE}" ]; then
  FOUND_BUILD=yes
  run_make
else
  echo "Make not found; Checking for Ninja"
  if [ -e "${NINJA_FILE}" ]; then
    FOUND_BUILD=yes
    run_ninja
  fi
fi

if [ "${FOUND_BUILD}" = "no" ]; then
  echo "Neither Make nor Ninja build file found!"
  echo "Nothing to do .. exiting"
  exit 1
fi

log_end

echo "Build complete!"
log_cat

echo "PopD"
popd
